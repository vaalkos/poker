import random
import numpy as np

class Card (object):
    #Определяет свойтсва карты
    def __init__(self, name, value, suit, symbol):
        self.value = value # Значение от 2 до 14
        self.suit = suit # Масть
        self.name = name # Имя карты (King и тд)
        self.symbol = symbol # Символ типа 2♣
        self.showing = False # По умолчанию карта скрыта
        
    #Показывает карту, если showing = True
    def __repr__(self):
        if self.showing:
            return self.symbol
        else:
            return "Card"
        
        
class Deck(object):
    #Тасует колоду
    def shuffle(self, times = 1):
        random.shuffle(self.cards)
    
    #Удаляет карту из колоды и возвращает её   
    def deal(self):
        return self.cards.pop(0)
    
class StandartDeck(Deck):
    #Формирует колоду из карт
    def  __init__(self):
        self.cards = []
        suits = {"Hearts":"♡", "Spades":"♠", "Diamonds":"♢", "Clubs":"♣"}
        values = {"Two":2,
                  "Three":3,
                  "Four":4,
                  "Five":5,
                  "Six":6,
                  "Seven":7,
                  "Eight":8,
                  "Nine":9,
                  "Ten":10,
                  "Jack":11,
                  "Queen":12,
                  "King":13,
                  "Ace":14 }
        
        for name in values:
            for suit in suits:
                symbolIcon = suits[suit]
                if values[name] < 11:
                    symbol = str(values[name])+symbolIcon
                else:
                    symbol = name[0]+symbolIcon
                self.cards.append(Card(name, values [name], suit, symbol))
            
            
class Player (object):
    #Список карт у Игрока
    def __init__(self):
        self.cards = []
    #Кол-во карт у Игрока    
    def cardCount(self):
        return len(self.cards)
    #Добавляет карты игроку
    def addCard(self, card):
        self.cards.append(card)
        
        
class Table (object):
    #Пустые боксы
    def __init__(self):
        self.front = []
        self.middle = []
        self.back = []
        
#Определяет ранк комбинации
class Ranking(object):
    def __init__(self, cards):
        self.cards = cards
    
    def flush(self):
        suits = [card.suit for card in self.cards]
        if len( set(suits) ) == 1:
            
            return True
    
    def straight (self):
        values = [card.value for card in self.cards]
        values.sort()
        
        if not len(set(values)) == 5:
            return False
        
        if values[4] == 14 and values[0] == 2 and values[1] == 3 and values[2] == 4 and values[3] == 5:
            return 5
        
        else:
            if not values[0] + 1 == values[1]: return False
            if not values[1] + 1 == values[2]: return False
            if not values[2] + 1 == values[3]: return False
            if not values[3] + 1 == values[4]: return False
        
        return True
    
    
    def onePair(self):
        onePair = []
        values = [card.value for card in self.cards]
        for value in values:
            if values.count(value) == 2 and value not in onePair:
                onePair.append(value)
        if len(onePair) == 1:
            
            return True
    
    def twoPairs(self):
        twoPairs = []
        values = [card.value for card in self.cards]
        for value in values:
            if values.count(value) == 2 and value not in twoPairs:
                twoPairs.append(value)
        if len(twoPairs) == 2:
            
            return True
        
    
    def fourKind(self):
        values = [card.value for card in self.cards]
        for value in values:
            if values.count(value) == 4:
                
                return True
    
    
    def fullHouse(self):
        two = False
        three = False
        values = [card.value for card in self.cards]
        for value in values:
            if values.count(value) == 2:
                two = True
            elif values.count(value) == 3:
                three = True
            if two and three:
                
                return True
            
    def threeKind(self):
        two = False
        three = False
        values = [card.value for card in self.cards]
        for value in values:
            if values.count(value) == 3:
                three = True
            elif values.count(value) == 2:
                two = True
            if three: 
                return True
            
    def rank (self):
        if self.straight() and self.flush() and self.straight() == 14:
            return "Роял Флеш!"

        elif self.straight() and self.flush():
            return "Стрит Флеш!"

        elif self.fourKind():
            return "Каре!"

        elif self.fullHouse():
            return "Фул Хаус!"

        elif self.flush():
            return "Флеш!"

        elif self.straight():
            return "Стрит!"

        elif self.threeKind():
            return "Сет!"

        elif self.twoPairs():
            return "Две пары!"
        
        elif self.onePair():
            return "Одна пара!"
        
        else:
            return 'Старшая карта!'
        
#Игрок расставляет карты в бокс        
class Dealing(Table, StandartDeck):
    def deal_to_box(self, player_cards, box):
        try:
            choicePlayer = list(np.int32(input().split(',')))
        except:
            choicePlayer = []
            
        for del_index in choicePlayer:
            box.append(player_cards[del_index-1])
            
        player_cards[:] = [x for n,x in enumerate(player_cards) if n+1 not in choicePlayer]
        
        return player_cards, box
    
    #Сообщение о том как карты расположены в боксах и сколько карт осталось у игрока
    def deal_message(self, player_cards, front, middle, back):
        print('Доска')
        print(front)
        print(middle)
        print(back)
        
        print('Оставшиеся карты')
        print(player_cards)

#Процесс игры
def Game():
    end = False
    while not end:
        # Определяем объекты
        table = Table()
        player = Player()
        deck = StandartDeck()
        dealing = Dealing()
        #Тасуем колоду
        deck.shuffle()

        
        ################  Первая улица  ################
        
        #Раздаем игроку 5 карт
        for i in range(5):
            player.addCard(deck.deal())
            
        #Показываем разданные карты
        for card in player.cards:
            card.showing = True
        print("Вам раздали {0} {1} {2} {3} {4}".format(*player.cards))
        
        print('Теперь поставьте карты в боксы')
        
        for i in range(1):
        ############### Бэк
            print('Начнем с БЭК. Выберите (через запятую) номера карт, которые нужно поставить туда. Номера с 1 до 5')
            dealing.deal_to_box(player.cards, table.back)
            dealing.deal_message(player.cards, table.front, table.middle, table.back)
            
            if len(player.cards) == 0:
                break
                
            ###############   Мидл
            print('Теперь МИДЛ')
            dealing.deal_to_box(player.cards, table.middle)
            dealing.deal_message(player.cards, table.front, table.middle, table.back)
            
            if len(player.cards) == 0:
                break
                
            ##############   Фронт
            print('Теперь ФРОНТ')
            dealing.deal_to_box(player.cards, table.front)
            dealing.deal_message(player.cards, table.front, table.middle, table.back)
            
            if len(player.cards) == 0:
                break
        
        ################ Следующие улицы (по три карты)  ################
        
        while len(table.front) <3 and len(table.middle) <5 and len(table.back) <5:
            print('Следующая улица')
            for i in range(3):
                player.addCard(deck.deal())

            #Показываем разданные карты
            for card in player.cards:
                card.showing = True
            print("Вам раздали {0} {1} {2}".format(*player.cards))

            print('Теперь поставьте карты в боксы')


            ############### Бек
            print('Начнем с БЭК. Выберите (через запятую) номера карт, которые нужно поставить туда. Номера с 1 до 5')
            dealing.deal_to_box(player.cards, table.back)
            dealing.deal_message(player.cards, table.front, table.middle, table.back)
           
            if len(player.cards) == 1:
                break

            ###############   Мидл
            print('Теперь МИДЛ')
            dealing.deal_to_box(player.cards, table.middle)
            dealing.deal_message(player.cards, table.front, table.middle, table.back)
            
            if len(player.cards) == 1:
                break
                
            ##############   Бэк
            print('Теперь ФРОНТ')
            dealing.deal_to_box(player.cards, table.front)
            dealing.deal_message(player.cards, table.front, table.middle, table.back)
            
            if len(player.cards) == 1:
                break
                
            player.cards = []
            
        
        # Подсчет комбинаций
        
        front_rank = Ranking(table.front)
        middle_rank = Ranking(table.middle)
        back_rank = Ranking(table.back)
        
        print('Результаты:')
        print('ФРОНТ '+ front_rank)
        print('МИДЛ '+ middle_rank)
        print('БЭК '+ back_rank)
        
        end = True
        
game = Game()
